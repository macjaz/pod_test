// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/taikang/im/protobuf/ProtocolType.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#import <SakuraKit/ProtocolType.pbobjc.h>

#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#import "ProtocolType.pbobjc.h"

#endif

#import <stdatomic.h>

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ProtocolTypeRoot

@implementation ProtocolTypeRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum ProtocolType

GPBEnumDescriptor *ProtocolType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ComUnknown\000ComChatMessageReq\000ComChatMess"
        "ageReqAck\000ComChatMessageNotify\000ComGroupM"
        "essageNotify\000ComGroupMessageNotifyAck\000Co"
        "mGroupMessageReq\000ComGroupMessageReqAck\000C"
        "omHeartbeatReq\000ComHeartbeatReqAck\000ComCon"
        "nectReq\000ComConnectReqAck\000ComDisconnectRe"
        "q\000ComDisconnectNotify\000ComSystemMessageNo"
        "tify\000ComChatMessageNotifyAck\000ComCustomer"
        "MessageReq\000ComCustomerMessageReqNotify\000C"
        "omCustomerMessageReply\000ComCustomerMessag"
        "eReplyNotify\000ComReceiveStateMessageReq\000C"
        "omReceiveStateMessageNotify\000ComSessionSt"
        "ateMessageReq\000ComSessionStateMessageNoti"
        "fy\000ComBroadcastMessage\000";
    static const int32_t values[] = {
        ProtocolType_ComUnknown,
        ProtocolType_ComChatMessageReq,
        ProtocolType_ComChatMessageReqAck,
        ProtocolType_ComChatMessageNotify,
        ProtocolType_ComGroupMessageNotify,
        ProtocolType_ComGroupMessageNotifyAck,
        ProtocolType_ComGroupMessageReq,
        ProtocolType_ComGroupMessageReqAck,
        ProtocolType_ComHeartbeatReq,
        ProtocolType_ComHeartbeatReqAck,
        ProtocolType_ComConnectReq,
        ProtocolType_ComConnectReqAck,
        ProtocolType_ComDisconnectReq,
        ProtocolType_ComDisconnectNotify,
        ProtocolType_ComSystemMessageNotify,
        ProtocolType_ComChatMessageNotifyAck,
        ProtocolType_ComCustomerMessageReq,
        ProtocolType_ComCustomerMessageReqNotify,
        ProtocolType_ComCustomerMessageReply,
        ProtocolType_ComCustomerMessageReplyNotify,
        ProtocolType_ComReceiveStateMessageReq,
        ProtocolType_ComReceiveStateMessageNotify,
        ProtocolType_ComSessionStateMessageReq,
        ProtocolType_ComSessionStateMessageNotify,
        ProtocolType_ComBroadcastMessage,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ProtocolType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ProtocolType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      //[worker release];
    }
  }
  return descriptor;
}

BOOL ProtocolType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ProtocolType_ComUnknown:
    case ProtocolType_ComChatMessageReq:
    case ProtocolType_ComChatMessageReqAck:
    case ProtocolType_ComChatMessageNotify:
    case ProtocolType_ComGroupMessageNotify:
    case ProtocolType_ComGroupMessageNotifyAck:
    case ProtocolType_ComGroupMessageReq:
    case ProtocolType_ComGroupMessageReqAck:
    case ProtocolType_ComHeartbeatReq:
    case ProtocolType_ComHeartbeatReqAck:
    case ProtocolType_ComConnectReq:
    case ProtocolType_ComConnectReqAck:
    case ProtocolType_ComDisconnectReq:
    case ProtocolType_ComDisconnectNotify:
    case ProtocolType_ComSystemMessageNotify:
    case ProtocolType_ComChatMessageNotifyAck:
    case ProtocolType_ComCustomerMessageReq:
    case ProtocolType_ComCustomerMessageReqNotify:
    case ProtocolType_ComCustomerMessageReply:
    case ProtocolType_ComCustomerMessageReplyNotify:
    case ProtocolType_ComReceiveStateMessageReq:
    case ProtocolType_ComReceiveStateMessageNotify:
    case ProtocolType_ComSessionStateMessageReq:
    case ProtocolType_ComSessionStateMessageNotify:
    case ProtocolType_ComBroadcastMessage:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
