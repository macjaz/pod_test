// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/taikang/im/protobuf/message/MessageType.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#import <SakuraKit/MessageType.pbobjc.h>

#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#import "MessageType.pbobjc.h"

#endif

#import <stdatomic.h>

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MessageTypeRoot

@implementation MessageTypeRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum MessageType

GPBEnumDescriptor *MessageType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Text\000Image\000Voice\000Video\000Shortvide"
        "o\000News\000File\000Custom\000System\000Recall\000Remind\000";
    static const int32_t values[] = {
        MessageType_Unknown,
        MessageType_Text,
        MessageType_Image,
        MessageType_Voice,
        MessageType_Video,
        MessageType_Shortvideo,
        MessageType_News,
        MessageType_File,
        MessageType_Custom,
        MessageType_System,
        MessageType_Recall,
        MessageType_Remind,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MessageType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MessageType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MessageType_IsValidValue(int32_t value__) {
  switch (value__) {
    case MessageType_Unknown:
    case MessageType_Text:
    case MessageType_Image:
    case MessageType_Voice:
    case MessageType_Video:
    case MessageType_Shortvideo:
    case MessageType_News:
    case MessageType_File:
    case MessageType_Custom:
    case MessageType_System:
    case MessageType_Recall:
    case MessageType_Remind:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
