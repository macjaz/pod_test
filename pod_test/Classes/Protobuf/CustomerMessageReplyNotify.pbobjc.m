// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/taikang/im/protobuf/CustomerMessageReplyNotify.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#import <SakuraKit/CustomerMessageReplyNotify.pbobjc.h>
#import <SakuraKit/MessageBody.pbobjc.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#import "CustomerMessageReplyNotify.pbobjc.h"
#import "MessageBody.pbobjc.h"
#endif


// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CustomerMessageReplyNotifyRoot

@implementation CustomerMessageReplyNotifyRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - CustomerMessageReplyNotifyRoot_FileDescriptor

static GPBFileDescriptor *CustomerMessageReplyNotifyRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - CustomerMessageReplyNotify

@implementation CustomerMessageReplyNotify

@dynamic messageId;
@dynamic sessionId;
@dynamic sessionLabel;
@dynamic to;
@dynamic toLabel;
@dynamic deviceType;
@dynamic hasBody, body;
@dynamic domain;
@dynamic sessionType;

typedef struct CustomerMessageReplyNotify__storage_ {
  uint32_t _has_storage_[1];
  int32_t deviceType;
  NSString *messageId;
  NSString *sessionId;
  NSString *sessionLabel;
  NSString *to;
  NSString *toLabel;
  MessageBody *body;
  NSString *domain;
  NSString *sessionType;
} CustomerMessageReplyNotify__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = CustomerMessageReplyNotify_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CustomerMessageReplyNotify__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = CustomerMessageReplyNotify_FieldNumber_SessionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CustomerMessageReplyNotify__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionLabel",
        .dataTypeSpecific.className = NULL,
        .number = CustomerMessageReplyNotify_FieldNumber_SessionLabel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CustomerMessageReplyNotify__storage_, sessionLabel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = CustomerMessageReplyNotify_FieldNumber_To,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CustomerMessageReplyNotify__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toLabel",
        .dataTypeSpecific.className = NULL,
        .number = CustomerMessageReplyNotify_FieldNumber_ToLabel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CustomerMessageReplyNotify__storage_, toLabel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.className = NULL,
        .number = CustomerMessageReplyNotify_FieldNumber_DeviceType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CustomerMessageReplyNotify__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = GPBStringifySymbol(MessageBody),
        .number = CustomerMessageReplyNotify_FieldNumber_Body,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(CustomerMessageReplyNotify__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "domain",
        .dataTypeSpecific.className = NULL,
        .number = CustomerMessageReplyNotify_FieldNumber_Domain,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(CustomerMessageReplyNotify__storage_, domain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionType",
        .dataTypeSpecific.className = NULL,
        .number = CustomerMessageReplyNotify_FieldNumber_SessionType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(CustomerMessageReplyNotify__storage_, sessionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CustomerMessageReplyNotify class]
                                     rootClass:[CustomerMessageReplyNotifyRoot class]
                                          file:CustomerMessageReplyNotifyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CustomerMessageReplyNotify__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\t\000\002\t\000\003\014\000\005\007\000\006\n\000\t\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
